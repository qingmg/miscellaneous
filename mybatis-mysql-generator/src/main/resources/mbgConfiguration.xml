<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- mybatis 逆向生成 xml 配置 -->
<generatorConfiguration>
    <properties resource="jdbc.properties"/>
    <context id="mysql" targetRuntime="MyBatis3">
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
                一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
        <property name="autoDelimitKeywords" value="true"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- 生成的 pojo, 将 implements Serializable -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>

        <!-- tk.mapper generator -->
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
        </plugin>

        <!-- 注释
        <commentGenerator >
            &lt;!&ndash; 是否取消注释 &ndash;&gt;
            <property name="suppressAllComments" value="true"/>
            &lt;!&ndash; 是否生成注释代时间戳&ndash;&gt;
            <property name="suppressDate" value="false" />
        </commentGenerator>-->
        <commentGenerator type="cn.qingmg.miscellaneous.mybatis.mysql.generator.MyCommentGenerator"/>

        <!-- 数据库连接信息 -->
        <jdbcConnection
                driverClass="${jdbc.driver}" connectionURL="${jdbc.url}"
                userId="${jdbc.user}" password="${jdbc.pass}"/>

        <!-- 默认为 false: 把 JDBC DECIMAL 和 NUMBER 类型解析为 Integer -->
        <!--       true : 把 JDBC DECIMAL 和 NUMBER 类型解析为 java.math.BigDecimal -->
        <!-- 是否使用 BigDecimal, false可自动转化以下类型（Long, Integer, Short, etc.） -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成 Model 模型, 对应的包路径, 以及文件存放路径{targetProject} -->
        <!-- targetProject 可以指定具体的路径, 如 ./src/main/java -->
        <!-- 用 Maven 来生成的话, 会生成在 target/generatord-source 目录下 -->
        <!-- <javaModelGenerator targetPackage="cn.qingmg.miscellaneous.shiro.pojo" targetProject="MAVEN" /> -->
        <javaModelGenerator targetPackage="cn.qingmg.miscellaneous.shiro.pojo" targetProject="${target.javasource}">
            <property name="enableSubPackages" value="false"/>
            <!-- 从数据库返回的值将被清理前后的空格 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- mapper.xml -->
        <sqlMapGenerator targetPackage="mappers" targetProject="${target.resource}">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 对应的 Mapper 接口类文件 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="cn.qingmg.miscellaneous.shiro.mapper"
                             targetProject="${target.javasource}">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <table tableName="sys_user" domainObjectName="SysUser"/>
    </context>
</generatorConfiguration>